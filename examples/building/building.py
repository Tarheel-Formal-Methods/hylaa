'''
Created by Hyst v1.3
Hybrid Automaton in Hylaa
Converted from file: /home/stan/Desktop/repositories/hylaa/examples/building/Building.xml
Command Line arguments: -tool hylaa "" -output /home/stan/Desktop/repositories/hylaa/examples/building/Building_converted.py -input /home/stan/Desktop/repositories/hylaa/examples/building/Building.xml /home/stan/Desktop/repositories/hylaa/examples/building/Building.cfg
'''

import numpy as np
from hylaa.hybrid_automaton import LinearHybridAutomaton, LinearConstraint
from hylaa.engine import HylaaSettings
from hylaa.engine import HylaaEngine
from hylaa.containers import PlotSettings, SimulationSettings

def define_ha():
    '''make the hybrid automaton and return it'''

    ha = LinearHybridAutomaton()
    ha.variables = ["x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "x29", "x30", "x31", "x32", "x33", "x34", "x35", "x36", "x37", "x38", "x39", "x40", "x41", "x42", "x43", "x44", "x45", "x46", "x47", "x48", "t"]

    # input variable order: [u1]

    Model = ha.new_mode('Model')
    a_matrix = np.array([ \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \
        [-606.1640460210929, 34.66953568004383, -5.043187234625393, -734.0402958498835, 124.54997534584304, -302.9098342692782, -98.21003424188467, -2.2039747979728803, -10.667792220243802, -41.86399808245446, 8.178395562251746, 51.36043829612382, -10.955747705793726, -2.3085855362279135, -11.998025065059581, -42.00330776605944, 4.941769209697301, -1.5216153951513491, -10.350360772496918, 8.696924667853718, 14.960213669360362, 37.885008902890014, -24.546055334885633, -19.299574030954663, -1.1332837008628955, 0.03652269689083687, -0.005312756471716203, -0.7732763320093138, 0.1312074414463772, -0.3191010135597863, -0.10345957266127927, -0.002321782084645939, -0.011238008765922475, -0.0441017189426106, 0.008615548554992466, 0.054105764963703604, -0.011541356115600601, -0.002431984385700589, -0.012639345432132583, -0.04424847555129434, 0.0052059174085741676, -0.001602949048075606, -0.010903609916449801, 0.009161794137789343, 0.015759869880838242, 0.039910045199287765, -0.025858094781536774, -0.020331177920832763, 0], \
        [33.51001917545541, -664.5248596082728, 79.77272017531844, 207.44958224900697, 829.0300369812354, 94.05472401040953, -4.313281194356938, -136.4844966442953, 16.276000547870154, 28.243066703191342, -76.93557046979866, -0.5545217504451445, 30.931494315847143, 51.904458293384465, 11.870464867826325, 9.694758115326668, -15.612658539926038, 15.140252020271195, 7.61328297493494, -5.712245171894261, 3.7841054650047936, -21.17173263936447, -29.013735104780167, 10.244604163813175, 0.035301202574989726, -1.194764032324339, 0.08403674428160526, 0.21853821394329542, 0.873343487193535, 0.09908215176003286, -0.004543835365018491, -0.1437798931653198, 0.017145988220791674, 0.02975272017531845, -0.08104794274756881, -0.0005841621421723052, 0.03258485002054513, 0.05467886316942885, 0.012504966853855637, 0.010212963840569784, -0.016447189426106013, 0.01594953157101767, 0.008020229420627311, -0.0060175770442405145, 0.003986374058348172, -0.02230340775236269, -0.03056458156416929, 0.010792200383509108, 0], \
        [-3.457686463393555, 76.57188298939948, -799.4087683135417, -347.7773377740743, -142.58570827840452, 867.6978017300314, -165.08326389300944, 36.99172778705082, 91.25595746382437, -66.26568340887924, 26.434494341151066, 39.519302260185796, 67.373291832528, -32.17685225076943, 17.16423948011341, 133.44969209773413, 34.37781555790033, 6.56518872719111, 27.868584939490173, -51.472837009155796, 41.979282705102634, -44.92803574607286, 34.41710115240839, 30.823889449284483, -0.0036425072815596594, 0.08066481607128576, -1.336857720001135, -0.36636679196022937, -0.1502072245454991, 0.9140781248790706, -0.17390732748056745, 0.03896901499653013, 0.09613378592085609, -0.06980772812758788, 0.027847475510999087, 0.0416316949716606, 0.07097453969449698, -0.033896774701191616, 0.018081705677939645, 0.14058287304932884, 0.03621538453600534, 0.006916112304997381, 0.029358220487432377, -0.05422417142429629, 0.04422316658196237, -0.047329536688999356, 0.036256770109100854, 0.032471492919666785, 0], \
        [-734.858668032787, 206.79932377049184, -348.316905737705, -1910.3864754098363, -135.40587090163936, -218.04590163934427, -1130.0131147540985, 263.6114549180328, -178.59876024590167, -285.0244159836066, 65.12463114754098, 125.08769467213115, -78.16361168032788, -2.0287888319672134, 11.413806352459016, -54.48132274590164, -17.624565573770493, -14.273302254098361, -13.334146516393444, 11.513941598360658, 88.076193647541, 56.30419159836066, -12.529565573770494, 19.49721823770492, -0.7741384528688525, 0.21785319672131148, -0.36693519467213115, -2.5072196721311477, -0.14264360655737707, -0.22970092213114757, -1.1904147540983607, 0.27770205942622955, -0.18814524590163936, -0.30025959016393444, 0.06860568340163935, 0.1317739036885246, -0.08234162602459018, -0.002137231967213115, 0.012023898565573772, -0.05739346721311476, -0.018566636270491804, -0.015036240778688524, -0.01404688524590164, 0.012129386270491803, 0.09278405635245902, 0.05931377254098361, -0.013199298155737707, 0.020539386270491806, 0], \
        [126.41253073770493, 830.412161885246, -142.1123668032787, -134.84305327868856, -1968.7185450819672, 54.561254098360656, 141.8019774590164, 1183.9078893442625, 118.23355532786886, -32.89744467213115, 295.1914856557377, -13.727144467213115, -6.980910860655738, -150.48875, -16.630795081967214, 76.50294364754099, 25.452959016393443, 26.848077868852464, 8.696032377049182, -20.180311475409837, -16.511030737704917, 8.533037807377049, 112.09105532786886, 9.102432069672131, 0.1331695491803279, 0.8747994877049181, -0.14970857581967215, -0.14205070696721311, -2.5686696721311475, 0.05747767110655738, 0.14938159836065576, 1.2471903688524681, 0.12455339139344264, -0.03465588422131148, 0.3109701127049181, -0.01446089036885246, -0.007354055635245902, -0.15853269467213116, -0.01751974692622951, 0.08059219159836066, 0.026813474385245905, 0.02828316598360656, 0.009160854098360656, -0.021258992827868854, -0.017393580942622954, 0.008989147131147542, 0.11808256147540985, 0.00958897674180328, 0], \
        [-308.6163437417403, 89.13963732202602, 845.8493698425524, -220.15395801333213, 49.49384045668191, -2326.7888636284542, 132.7621956324008, 67.1693114874989, -1400.6089468342573, 24.168445191492804, 24.27846008124935, -85.26647773073714, -294.404263944685, 127.92474606051657, -24.455635015665756, -379.0557091352372, -100.1563565527627, -46.536859907425786, -67.41134857174032, 169.29803686602136, -100.19054749719466, 200.07334827639076, -126.9087811939459, -44.044511248209325, -0.325112557341553, 0.09390434342569748, 0.8910618475149721, -0.23192166276159365, 0.05213939370566817, -2.9458796384695627, 0.13985861785811368, 0.07075965600241547, -1.4754745110506826, 0.025460300410009153, 0.025576195954087253, -0.08982415507921294, -0.3101408083736304, 0.13476259632957627, -0.025762841827141496, -0.39931705587280025, -0.10550993418595925, -0.04902435599216289, -0.07101463109052653, 0.17834738752025825, -0.10554594990156582, 0.21076770192645042, -0.13369233041150472, -0.04639878586874628, 0], \
        [-97.13512918660285, -3.2644194258373203, -166.03193301435405, -1130.1354066985646, 140.17438277511962, 149.90320574162678, -2042.1976076555022, 77.15282583732058, 122.69885167464115, -1223.5565550239235, -66.50526411483254, 249.1823827751196, -16.631500478468897, 2.6273956937799046, 56.399134928229664, -46.87115980861243, -118.39521531100478, -62.01111961722488, -2.1658452631578946, -30.26864784688995, 130.25013397129186, 5.21906937799043, -24.931432535885165, 6.330342775119616, -0.10232721531100478, -0.00343890966507177, -0.17490669856459332, -1.1905435406698563, 0.147667004784689, 0.15791585645933012, -2.6460763636363636, 0.08127681148325358, 0.12925736842105262, -1.288958277511962, -0.07006011387559809, 0.26250172248803827, -0.01752048995215311, 0.0027678356937799044, 0.05941379043062201, -0.049376524401913875, -0.1247236937799043, -0.06532574832535885, -0.0022816143540669853, -0.03188657224880383, 0.1372122870813397, 0.005498039904306221, -0.026264071770334928, 0.006668713301435407, 0], \
        [-2.5435459330143537, -138.28534928229664, 34.595927272727266, 264.0240478468899, 1185.0156937799043, 58.931367464114835, 77.07762009569377, -2124.434832535885, -54.17814545454546, 240.20243062200956, -1279.6158851674638, 14.033242105263158, 37.3134947368421, 238.9926889952153, 1.7648250717703349, -96.46753110047847, 33.32428325358852, -103.9884976076555, -129.68756937799043, 35.96147177033493, 34.9162956937799, -10.089807655502392, -99.83997129186602, -13.713088038277512, -0.002679503923444976, -0.145677004784689, 0.03644515406698565, 0.2781367081339713, 1.2483573205741627, 0.06208137607655502, 0.08119758564593302, -2.7327093779904303, -0.057074084210526316, 0.25304177033492825, -1.3480141626794258, 0.014783349282296649, 0.03930798181818182, 0.25176736842105263, 0.001859158755980861, -0.10162393301435406, 0.03510553779904306, -0.10954690909090908, -0.13661964593301434, 0.03788368995215311, 0.03678264688995215, -0.01062913014354067, -0.10517663157894735, -0.014446082296650717, 0], \
        [-11.067909779064447, -4.384646538692887, 54.57604334814621, -167.434912003892, 119.06454647523276, -1413.1150647053323, 116.29819804688437, -50.9782870399865, -2668.8167541346297, 58.11984862236924, 61.2207493920818, -299.5078985928731, -1455.3832304760833, 600.5872171287727, -14.962421181615925, -609.8086846875768, -179.98271601056732, -140.8875067948666, -67.42472777096107, 261.43970088521496, -215.80384616339285, 374.46137909522577, -267.8339413204836, -167.39489158412852, -0.011659513681986177, -0.004619015366947618, 0.05749325063935869, -0.1763846676369088, 0.1254288026224669, -1.4886491598359468, 0.12251458465886668, -0.05370318698893709, -3.3061896373837216, 0.06122647983300141, 0.0644931306691113, -0.31551724137931036, -1.5331765722100918, 0.6326899066962428, -0.01576219497564604, -0.6424042782217596, -0.18960317979072225, -0.14841824606807857, -0.07102872501412752, 0.2754142158951477, -0.22733902681790089, 0.3944771489773984, -0.2821502474282929, -0.176342512574123, 0], \
        [-42.21934468822171, 29.02796189376443, -59.832756206697454, -284.77894774826785, -31.960067118937648, 16.188924653579676, -1220.6003897228638, 238.17117494226326, 45.965041137413394, -2290.884310046189, 219.74165704387988, 1329.2914982678983, -104.54904012702079, -231.4487297921478, 196.73420900692838, -91.29343966512702, -418.1007361431871, -203.17082130484985, 77.14665848729793, -64.40696665704388, 127.60241772517321, -66.4219688221709, 17.646868504618936, 14.772431437644341, -0.04447606019053118, 0.030579569139722863, -0.06303094616050808, -0.30000099595842955, -0.03366840213625866, 0.01705425736143187, -1.2858441108545033, 0.2509019413972286, 0.048421971709006924, -2.9080559324480366, 0.2314873267898383, 1.4003449769053118, -0.11013741339491917, -0.24382016454965355, 0.20725007938799075, -0.09617326789838337, -0.44044912673210157, -0.21403073758660507, 0.08127031610854503, -0.06784965863163972, 0.13442304416859122, -0.0699723664838337, 0.018590132072748268, 0.015562049653579676, 0], \
        [5.314682015011547, -77.32038827944574, 33.09794457274827, 62.87302756928406, 295.94767609699767, 11.23858761547344, -66.80777064087759, -1279.2231524249423, 57.198017465357964, 221.06621680138568, -2387.5773672055425, 120.01273094688221, 572.5773599884527, 1229.0912961893764, 124.63178406466511, -56.08938293879907, 180.30396218244803, -312.4782621247113, -445.949797921478, -24.273812788683603, 86.34254474595842, -2.8316568273672056, -45.574046622401845, -33.34623123556582, 0.0055987632794457275, -0.08145332707852193, 0.03486710161662818, 0.06623372690531178, 0.3117667219976905, 0.011839314376443418, -0.07037879041570438, -1.3476003897228637, 0.060255375288683605, 0.23288268620092378, -3.0099174364896073, 0.1264276703233256, 0.6031828594110854, 1.2947889001154733, 0.13129362009237874, -0.059087481957274826, 0.18994159930715934, -0.32918090357967666, -0.469786778290993, -0.025571300519630483, 0.09095774393764433, -0.002983015011547344, -0.048010077944572745, -0.03512865906466513, 0], \
        [48.40944602966756, -3.7334935114429224, 32.384951482400766, 123.40138663591769, -10.508858248480466, -100.46059349776223, 251.00451096409796, 15.114552592491254, -306.959698145289, 1327.894260460844, 119.58841269763715, -2059.641712431841, -316.7708129751598, 309.6609142611449, -870.9456900932242, -176.0474707819493, 612.7967000214983, 311.81072517442885, -23.027424902769365, 201.61256889205936, -171.23686897805226, 169.57288755447848, -91.87314333457111, -44.00146273477046, 0.05099703544276585, -0.003933056828620009, 0.03411599700490551, 0.12999745929993942, -0.011070579548341706, -0.10583043025778335, 0.2644212456270643, 0.01592245795629996, -0.3233673559129908, 1.3988730529442805, 0.12598067357867376, -2.6644529188734927, -0.33370289932964603, 0.32621295830320324, -0.9174996213379718, -0.18545758863134443, 0.6455520037328747, 0.32847768092716007, -0.024258290866183283, 0.21238919860456937, -0.1803898508804503, 0.17863692663239977, -0.09678396231946373, -0.04635343580823578, 0], \
        [-18.711484697508897, 16.772341637010676, 31.337272597864768, -86.79935231316725, -1.8261243416370105, -326.2242846975089, -26.87475871886121, 48.42260284697508, -1444.0616370106761, -111.75499644128112, 580.8384270462633, -316.9714448398576, -2618.377153024911, 213.68954448398577, -227.05764412811385, -1560.2528113879002, -475.1213736654804, 287.07735231316724, 62.344503914590746, 349.7121992882562, -307.68980071174377, 551.8583914590747, -413.5371174377224, -278.7906761565836, -0.01971165409252669, 0.017668859786476865, 0.03301231743772242, -0.09143896797153024, -0.0019237346619217078, -0.3436616797153025, -0.02831127259786477, 0.05101089537366548, -1.521249822064057, -0.11772854092526688, 0.6118854946619217, -0.33391425622775794, -3.253053950177936, 0.22511171530249108, -0.23919436298932384, -1.6436516725978647, -0.5005176370106761, 0.302422256227758, 0.06567695231316725, 0.3684050747330961, -0.3241364839857651, 0.5813564128113878, -0.4356415729537366, -0.293692640569395, 0], \
        [2.1605042704626336, 59.15205338078291, -19.397068327402135, 2.4356938790035585, -153.3190177935943, 143.73890391459074, 5.167185622775801, 235.2632740213523, 606.8073096085409, -229.21768683274018, 1225.8034163701068, 308.87653380782916, 220.46859786476867, -2060.7342348754446, -41.024373665480425, 847.4640569395017, -549.3571743772242, 704.7632811387899, 575.9323629893238, -182.7617153024911, 62.76998576512456, -246.61828469750887, 238.4465765124555, 159.34679715302488, 0.002275987900355872, 0.062313858362989326, -0.02043388327402135, 0.0025658869750889678, -0.16151424911032028, 0.15142205693950178, 0.005443382846975089, 0.24783860498220636, 0.6392424697508897, -0.24146986476868326, 1.2913252669039144, 0.3253866548042704, 0.23225312455516012, -2.66560384341637, -0.04321721494661922, 0.8927628469750889, -0.5787215017793594, 0.7424343772241992, 0.6067171957295373, -0.19253072597864768, 0.06612517722419928, -0.25980056227758, 0.2511920640569395, 0.1678642277580071, 0], \
        [-11.1083828280582, 11.650208265140138, 6.899602959438896, 10.745185039891458, -14.165214724232968, -24.223959361436844, 58.599951025833874, 1.0473199137454994, -23.410719595413422, 194.70807898833365, 124.73726984015931, -874.4895192785806, -232.16761283422994, -36.53833852642731, -982.4365147384755, -164.62201813543356, 658.4611617371837, 612.287968096829, 81.85791994722784, 340.62570743932577, -202.9068353943295, 81.19633768187282, -56.02433216478308, -15.279456961452833, -0.011702149616077519, 0.012272937275587129, 0.007268401543185969, 0.011319538318536972, -0.014922375946688124, -0.025518782592182623, 0.061732244990767376, 0.0011033014459872418, -0.024662073256357272, 0.20511564524713216, 0.13140474649622325, -0.9212328621652079, -0.2445774728830542, -0.038491392040698534, -1.5296687247476957, -0.17342142020084408, 0.6936573457501168, 0.6450160665249082, 0.08623340562853096, 0.35883289065018203, -0.2137526454795096, 0.08553645452024057, -0.05901895375189588, -0.016096176766755538, 0], \
        [-45.160378309319334, 0.3467728227695366, 87.26590957484564, -58.988829583362914, 81.86004684505644, -393.9925189864434, -43.61677975725744, -87.10507488111294, -585.6540705514941, -95.77527148839522, -55.62054865497907, -175.40423734828593, -1550.1530271843285, 849.0085882603452, -150.2368372489176, -2830.9753708566973, -714.7264532614097, -306.41171126410677, -276.74203988927536, 1235.5631343601392, -213.25551139186604, 900.3670239193699, -708.017055859181, -408.5128043154234, -0.047574298388813975, 0.0003653085811626092, 0.09193046348214921, -0.06214191000070979, 0.08623564482929946, -0.4150522677265953, -0.04594819078713891, -0.09176102633259992, -0.616958549222798, -0.10089466960039749, -0.05859358719568459, -0.1847799701895096, -1.6330120661508982, 0.8943899496060758, -0.1582673220242743, -3.4770159699056005, -0.7529301582795089, -0.3227900773653205, -0.2915345020938321, 1.3016066434807299, -0.2246544822201718, 0.9484935765490811, -0.7458620909929733, -0.43034869756547667, 0], \
        [3.50587422812123, -19.00151820569239, 24.58528852296118, -17.34086308467599, 25.699655759812625, -100.4358506636383, -121.82605578820359, 37.28589537937398, -153.77652778763579, -417.6549577684719, 181.10397473206052, 615.6534814394208, -480.91464972673725, -550.1960039747322, 663.4292142806446, -703.0685357371, -2922.4455248775644, -629.5817872098802, 982.7833771027044, -72.58471857477466, 517.7192561572859, 573.3644758322096, -34.1032429554972, -92.29371850379731, 0.00369327077862162, -0.020017190716161547, 0.0258994250833984, -0.018267769891404644, 0.02707335793881752, -0.10580436510753072, -0.12833792320249843, 0.03927890694868338, -0.16199621690680677, -0.439979515934417, 0.1907843707857194, 0.6485614947831643, -0.5066205763361489, -0.5796051671516788, 0.698890943289091, -0.740649087940947, -3.5733753992476402, -0.6632342962594933, 1.0353152814252256, -0.0764645255163603, 0.5453924693022927, 0.6040120448576904, -0.03592613528284478, -0.09722701398253958, 0], \
        [-6.5409708878566555, 11.688632371424074, 14.446481980755152, -16.840922038624626, 27.25263361077032, -50.50572323099565, -63.94996639272784, -102.31970760423877, -140.12652076029894, -204.16175467440925, -309.4076312245291, 316.3947517684422, 287.24998813126075, 700.1580416330386, 615.1074120901225, -292.97075792519445, -628.3253083998192, -1965.6972821836482, -1181.8253371346616, -160.135147459715, 504.0843267676301, 10.683912985899939, -328.2384854489257, -67.72859816446825, -0.0068906002083900745, 0.012313415298430079, 0.01521867777247502, -0.017741105941615796, 0.02870934582007991, -0.05320536354572963, -0.06736823200761599, -0.10778891634662716, -0.1476165884995665, -0.2150746418764102, -0.32594613841198766, 0.33330673694626084, 0.30260412007665954, 0.7375829874741074, 0.6479862497532553, -0.3086306785670559, -0.6619106546296828, -2.5654869556309046, -1.2449964518716379, -0.16869471978531325, 0.5310287260969839, 0.011254991117185685, -0.34578354293110386, -0.07134883848769774, 0], \
        [-11.411200207940738, 5.9383065826239525, 26.83371174215349, -15.35914679316395, 6.134597634674119, -51.136453960621225, -1.607169796607967, -127.63224381051403, -64.66166352589512, 76.0686659302099, -444.2153876145299, -20.062326986808763, 77.79944765741764, 570.7321008512574, 84.55803496003641, -263.8196049125999, 983.0675807394892, -1184.408603547989, -2653.3813763077524, 240.05002274351813, 17.02885892520632, -433.2912339983105, -721.5644941191761, -85.17123919682892, -0.012021153421274938, 0.006255721944245891, 0.02826803171096238, -0.016180126713886543, 0.006462505166027682, -0.053869808304633185, -0.0016930764832022876, -0.1344544609786211, -0.0681179673792969, 0.08013470011046853, -0.46795965949704343, -0.021134702059912927, 0.08195799597114822, 0.6012389628955749, 0.0890778478133732, -0.2779213334199753, 1.035614659821951, -1.2477177854311523, -3.2899292351679774, 0.2528812138540516, 0.0179390883098317, -0.4564515887971929, -0.7601336669049321, -0.089723828708818, 0], \
        [10.661150822015728, 0.7562933913834559, -31.370244330365846, 18.756953018389762, -29.413945025667687, 193.90925986093964, -34.39535577360453, 32.90843069725129, 271.8943076223277, -54.428797842614856, -33.15765481837677, 199.94284878809543, 354.8781142374424, -181.87016050425632, 333.8826304503217, 1248.2879979205927, -59.083988563259474, -157.94261485476642, 239.25501332120348, -1528.866073169147, 772.8311781142376, -858.9186431866918, 734.2724023653259, 372.63035284943794, 0.011231012411462734, 0.0007967188901163169, -0.03304705179023979, 0.01975955292741569, -0.030986184287478076, 0.20427413087270133, -0.03623386184937293, 0.034667457274676725, 0.28642764961985834, -0.057338135031516024, -0.03493000324907402, 0.2106302293846254, 0.3738471180713497, -0.1915915134186757, 0.35172937812723376, 1.3150116966664502, -0.06224215543570084, -0.16638498927805578, 0.25204371304178314, -2.1053061277535905, 0.8141406849048023, -0.9048296835401911, 0.7735208265644292, 0.3925482487491065, 0], \
        [21.144981470767593, -0.6736213539882868, 25.3394609852094, 82.66411876060191, -18.14279286754436, -108.57916322622006, 131.04227247530065, 40.675447140364675, -205.49772690932807, 125.37034505682853, 92.03784230657293, -169.71503266259546, -294.3607679631665, 57.77237114150866, -200.48080672146833, -211.3660737749446, 512.5041424069994, 500.79348089801834, 15.00589999813371, 785.7019999061811, -3685.609341134089, 248.16785814986105, -125.37368420256206, -428.0728690373929, 0.0222752263128719, -0.0007096278870117824, 0.02669390979161612, 0.08708269631478359, -0.01911256451940765, -0.11438295663700611, 0.13804676619876594, 0.042849637561455156, -0.21648202334072955, 0.13207166250618524, 0.09695746321769566, -0.1787866694442441, -0.3100949891124682, 0.06086043026557305, -0.2111969374686955, -0.22266404814422688, 0.5398986049735113, 0.5275619746961352, 0.015807997607113693, 0.8276994748663712, -4.377331992294745, 0.2614329676582046, -0.13207517819285636, -0.4509542895160408, 0], \
        [30.437520516158244, -10.312113871752787, -14.55851378119871, 71.32030109230857, 9.407398268153262, 217.11864282075953, 3.4082421755617185, -22.60952515705473, 366.85093100911206, -62.43741015337598, -17.336621200973457, 170.52517969324808, 551.5881147772936, -246.565912049352, 70.63108268719226, 918.768747523912, 591.4085120833098, 17.74546041088913, -424.26868526798347, -874.9534212462505, 255.2670326560643, -4294.378289659856, 510.73057332050485, 1033.1134189823986, 0.03206447167355255, -0.010863318806950026, -0.015336697605976569, 0.07513252589280661, 0.009910243930046976, 0.22872410436357465, 0.0035904201143245234, -0.02381805308732809, 0.38645990718207035, -0.0657748259663818, -0.01826330126209746, 0.17964012111607902, 0.5810717075103289, -0.25974539589110873, 0.07440646895693022, 0.9678789405172903, 0.6230206010526912, 0.018693993434829363, -0.4469467655215349, -0.9217215462108779, 0.2689116079008433, -5.018640953081668, 0.5380302280830834, 1.0883355594544117, 0], \
        [-18.026860037353558, -37.470309581753355, 11.835238553398607, -25.980535966947762, 110.25576433301262, -133.08932027845378, -21.113355594544117, -89.42760767445809, -265.96394815779047, 11.486499518931463, -31.544880864791445, -88.77530703491992, -389.1294866715717, 228.9493406531213, -47.085348916180884, -703.4479031071369, -45.639316316712886, -333.5336917765578, -724.091176637048, 748.6371045333635, -119.88490576716283, 488.52793027336014, -3962.5149131246817, -875.8107985737734, -0.018990434659573265, -0.039473178448129496, 0.012467857830097913, -0.02736925179693248, 0.11614917086422549, -0.14020323164865017, -0.02224191012507782, -0.0942077084158696, -0.28018029882845663, 0.012100477672760202, -0.03323102269511574, -0.0935205387967627, -0.4099292999037863, 0.24118717527873676, -0.04960216254456959, -0.7410487294130964, -0.04807883638010074, -0.3513617861791839, -0.7627954043805536, 0.788653404267361, -0.12629301601675252, 0.5146408059312921, -4.669038768464542, -0.9226247665402684, 0], \
        [12.708461033093819, 4.866919335674403, -6.4355958807311815, 9.496286501997412, 3.553679945786901, -74.3522726144416, 13.536755190457434, -16.22119432648995, -158.43112569959058, 2.607750685938022, -31.934178082418473, -48.09456925739969, -252.144842970666, 158.7214371766824, -25.236170364167723, -416.3920570197358, -103.0907879102803, -75.10798352424861, -90.1181567546278, 375.82224441568667, -425.248600818823, 1006.808038299999, -878.1109647482466, -4455.569998775406, 0.01338775563395898, 0.0051270665020636055, -0.006779592557779315, 0.010003883534508722, 0.003743631822559665, -0.078326563591171, 0.014260324236035493, -0.017088252256396846, -0.1668996139219768, 0.0027471406148122895, -0.033641129058949296, -0.05066532678451451, -0.26562253219523335, 0.16720543967882545, -0.026585098099893758, -0.4386491323587332, -0.10860121185142037, -0.07912266954832346, -0.09493516685918164, 0.39591075441598456, -0.44797904786175985, 1.060624096034633, -0.925047908095889, -5.188448853349926, 0], \
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
        ], dtype=float)
    c_vector = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], dtype=float)
    Model.set_dynamics(a_matrix, c_vector)
    
    # u1 >= 0.8
    # u1 <= 1.0
    u_constraints_a = np.array([[-1], [1]], dtype=float)
    u_constraints_b = np.array([-0.8, 1], dtype=float)
    b_matrix = np.array([[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.013696753869332967], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]], dtype=float)
    Model.set_inputs(u_constraints_a, u_constraints_b, b_matrix)

    _error = ha.new_mode('_error')
    _error.is_error = True

    trans = ha.new_transition(Model, _error)
    trans.condition_list.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.006)) # x25 >= 0.006

    return ha

def define_init_states(ha):
    '''returns a list of (mode, list(LinearConstraint])'''
    # Variable ordering: [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, t]
    rv = []
    
    constraints = []
    constraints.append(LinearConstraint([-1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x1 >= 0.0002
    constraints.append(LinearConstraint([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x1 <= 0.00025
    constraints.append(LinearConstraint([-0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x2 >= 0.0002
    constraints.append(LinearConstraint([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x2 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x3 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x3 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x4 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x4 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x5 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x5 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x6 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x6 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x7 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x7 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x8 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x8 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x9 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x9 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0.0002)) # x10 >= 0.0002
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.00025)) # x10 <= 0.00025
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x11 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x11 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x12 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x12 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x13 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x13 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x14 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x14 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x15 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x15 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x16 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x16 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x17 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x17 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x18 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x18 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x19 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x19 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x20 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x20 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x21 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x21 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x22 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x22 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x23 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x23 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x24 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x24 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], 0.0001)) # x25 >= -0.0001
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0.0001)) # x25 <= 0.0001
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x26 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x26 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x27 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x27 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x28 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x28 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x29 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x29 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x30 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x30 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x31 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x31 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x32 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x32 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x33 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x33 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x34 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x34 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x35 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x35 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x36 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x36 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x37 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x37 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x38 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x38 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x39 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x39 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x40 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x40 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0, -0], -0)) # x41 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], 0)) # x41 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0, -0], -0)) # x42 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], 0)) # x42 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0, -0], -0)) # x43 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], 0)) # x43 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0, -0], -0)) # x44 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], 0)) # x44 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0, -0], -0)) # x45 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], 0)) # x45 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0, -0], -0)) # x46 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], 0)) # x46 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0, -0], -0)) # x47 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], 0)) # x47 <= 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1, -0], -0)) # x48 >= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], 0)) # x48 <= 0.0
    constraints.append(LinearConstraint([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 0)) # t = 0.0
    constraints.append(LinearConstraint([-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -1], -0)) # t = 0.0
    rv.append((ha.modes['Model'], constraints))
    
    return rv


def define_settings():
    'get the hylaa settings object'
    plot_settings = PlotSettings()
    plot_settings.plot_mode = PlotSettings.PLOT_IMAGE
    #plot_settings.plot_mode = PlotSettings.PLOT_FULL
    plot_settings.xdim = 48
    plot_settings.ydim = 24
    
    # save a video file instead
    # plot_settings.make_video("building.mp4", frames=220, fps=40)
    
    plot_settings.num_angles = 3
    plot_settings.max_shown_polys = 2048
    plot_settings.label.y_label = '$x_{25}$'
    plot_settings.label.x_label = 'Time'
    plot_settings.label.title = ''
    plot_settings.label.axes_limits = (0, 1, -0.007, 0.006)
    plot_settings.plot_size = (12, 12)
    plot_settings.label.big(size=40)

    settings = HylaaSettings(step=0.005, max_time=1.0, plot_settings=plot_settings)

    return settings

def run_hylaa(settings):
    'Runs hylaa with the given settings, returning the HylaaResult object.'
    ha = define_ha()
    init = define_init_states(ha)

    engine = HylaaEngine(ha, settings)
    engine.run(init)

    return engine.result

if __name__ == '__main__':
    run_hylaa(define_settings())

